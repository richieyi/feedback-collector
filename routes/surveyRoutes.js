const _ = require('lodash');
const Path = require('path-parser');
const { URL } = require('url');
const mongoose = require('mongoose');
const requireLogin = require('../middlewares/requireLogin');
const requireCredits = require('../middlewares/requireCredits');
const Mailer = require('../services/Mailer');
const surveyTemplate = require('../services/emailTemplates/surveyTemplate');

// Sidestep issue with running potential tests
const Survey = mongoose.model('surveys');

module.exports = app => {
	app.get('/api/surveys', requireLogin, async (req, res) => {
		// Find surveys created by current user
		const surveys = await Survey.find({ _user: req.user.id })
			// Exclude recipients
			.select({ recipients: false });

		res.send(surveys);
	});

	app.get('/api/surveys/:surveyId/:choice', (req, res) => {
		res.send('Thanks for answering!');
	});

	app.post('/api/surveys/webhooks', (req, res) => {
		// Pull variables out of path
		const p = new Path('/api/surveys/:surveyId/:choice');

		// Use lodash chain method to refactor
		_.chain(req.body)
			// Map over array of events
			.map(({ email, url }) => {
				// Check for match and return object, or return null
				const match = p.test(new URL(url).pathname);
				// If match, return object with these properties
				if (match) {
					return {
						email,
						surveyId: match.surveyId,
						choice: match.choice
					};
				}
			})
			// Return only event objects
			.compact()
			// Remove records of duplicate emails on same survey
			.uniqBy('email', 'surveyId')
			// Run over every single element in events aray
			.each(({ surveyId, email, choice }) => {
				// Find AND update survey with a matching surveyId
				Survey.updateOne(
					{
						_id: surveyId,
						recipients: {
							// $ is match for setting responded to true below
							$elemMatch: { email: email, responded: false }
						}
					},
					{
						// Increment choice by 1
						$inc: { [choice]: 1 },
						// Find matching $ recipient from above
						// and set responded to true
						$set: { 'recipients.$.responded': true },
						// Set last responded with current Date
						lastResponded: new Date()
					}
				).exec(); // Execute query
			})
			.value();

		res.send({});
	});

	// Verify that user is logged in & verify that they have enough credits
	app.post('/api/surveys', requireLogin, requireCredits, async (req, res) => {
		// Pull properties from req.body
		const { title, subject, body, recipients } = req.body;

		// Create a new Survey
		const survey = Survey({
			title,
			subject,
			body,
			recipients: recipients.split(',').map(email => ({
				email: email.trim()
			})),
			// ID generated by Mongoose
			_user: req.user.id,
			dateSent: Date.now()
		});

		// Send email via Mailer
		const mailer = new Mailer(survey, surveyTemplate(survey));
		try {
			await mailer.send();
			await survey.save();

			// Dock user a credit after sending survey
			req.user.credits -= 1;
			const user = await req.user.save();

			// Send user to allow authReducer to update header
			res.send(user);
		} catch (err) {
			// 422 === Unprocessable Entity
			res.status(422).send(err);
		}
	});
};
